
# ============================================
# Contact Form Feature
# ============================================

# Initialize contacts collection
try:
    if db is not None:
        contacts_collection = db.contacts
        print("✅ Contacts collection initialized")
except:
    contacts_collection = None
    print("⚠️ Contacts collection not available")

@app.route('/contact')
def contact_page():
    """Render contact form page"""
    html = """
    <!DOCTYPE html>
    <html lang="he" dir="rtl">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>צור קשר - אוריין ראסק</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { 
                font-family: 'Segoe UI', Arial, sans-serif; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 20px;
            }
            .contact-container {
                background: white;
                border-radius: 20px;
                box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                max-width: 600px;
                width: 100%;
                padding: 40px;
                animation: slideIn 0.5s ease;
            }
            @keyframes slideIn {
                from { opacity: 0; transform: translateY(30px); }
                to { opacity: 1; transform: translateY(0); }
            }
            h1 {
                color: #333;
                margin-bottom: 10px;
                font-size: 2.5em;
            }
            .subtitle {
                color: #666;
                margin-bottom: 30px;
                font-size: 1.1em;
            }
            .form-group {
                margin-bottom: 25px;
            }
            label {
                display: block;
                margin-bottom: 8px;
                color: #555;
                font-weight: 600;
            }
            input, textarea {
                width: 100%;
                padding: 12px 15px;
                border: 2px solid #e0e0e0;
                border-radius: 10px;
                font-size: 16px;
                transition: all 0.3s;
                font-family: inherit;
            }
            input:focus, textarea:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }
            textarea {
                resize: vertical;
                min-height: 120px;
            }
            .btn-submit {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                padding: 15px 40px;
                border-radius: 30px;
                font-size: 18px;
                font-weight: 600;
                cursor: pointer;
                transition: transform 0.3s, box-shadow 0.3s;
                width: 100%;
            }
            .btn-submit:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
            }
            .back-link {
                display: inline-block;
                margin-top: 20px;
                color: #667eea;
                text-decoration: none;
                font-weight: 600;
                transition: color 0.3s;
            }
            .back-link:hover {
                color: #764ba2;
            }
            .success-message, .error-message {
                padding: 15px;
                border-radius: 10px;
                margin-bottom: 20px;
                display: none;
            }
            .success-message {
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }
            .error-message {
                background: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
        </style>
    </head>
    <body>
        <div class="contact-container">
            <h1>צור קשר</h1>
            <p class="subtitle">אשמח לשמוע ממך! מלא את הטופס ואחזור אליך בהקדם</p>
            
            <div class="success-message" id="successMsg">
                <i class="fas fa-check-circle"></i> ההודעה נשלחה בהצלחה! אחזור אליך בקרוב.
            </div>
            
            <div class="error-message" id="errorMsg">
                <i class="fas fa-exclamation-circle"></i> אופס! משהו השתבש. אנא נסה שוב.
            </div>
            
            <form id="contactForm">
                <div class="form-group">
                    <label for="name">שם מלא *</label>
                    <input type="text" id="name" name="name" required>
                </div>
                
                <div class="form-group">
                    <label for="email">כתובת אימייל *</label>
                    <input type="email" id="email" name="email" required>
                </div>
                
                <div class="form-group">
                    <label for="message">הודעה *</label>
                    <textarea id="message" name="message" required></textarea>
                </div>
                
                <button type="submit" class="btn-submit">
                    <i class="fas fa-paper-plane"></i> שלח הודעה
                </button>
            </form>
            
            <a href="/" class="back-link">
                <i class="fas fa-arrow-right"></i> חזרה לדף הבית
            </a>
        </div>
        
        <script>
            document.getElementById('contactForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const formData = {
                    name: document.getElementById('name').value,
                    email: document.getElementById('email').value,
                    message: document.getElementById('message').value
                };
                
                try {
                    const response = await fetch('/api/contact', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    });
                    
                    const result = await response.json();
                    
                    if (response.ok) {
                        document.getElementById('successMsg').style.display = 'block';
                        document.getElementById('errorMsg').style.display = 'none';
                        document.getElementById('contactForm').reset();
                        
                        setTimeout(() => {
                            document.getElementById('successMsg').style.display = 'none';
                        }, 5000);
                    } else {
                        throw new Error(result.error || 'Failed to send message');
                    }
                } catch (error) {
                    document.getElementById('errorMsg').style.display = 'block';
                    document.getElementById('successMsg').style.display = 'none';
                    
                    setTimeout(() => {
                        document.getElementById('errorMsg').style.display = 'none';
                    }, 5000);
                }
            });
        </script>
    </body>
    </html>
    """
    return html

@app.route('/api/contact', methods=['POST'])
def submit_contact():
    """Handle contact form submission"""
    try:
        data = request.json
        
        # Validate required fields
        required_fields = ['name', 'email', 'message']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'error': f'{field} is required'}), 400
        
        # Create contact document
        contact = {
            'name': data.get('name'),
            'email': data.get('email'),
            'message': data.get('message'),
            'timestamp': datetime.now(timezone.utc),
            'status': 'new',
            'ip': request.remote_addr
        }
        
        # Save to MongoDB if available
        if contacts_collection is not None:
            result = contacts_collection.insert_one(contact)
            contact['_id'] = str(result.inserted_id)
            print(f"✅ New contact form submission from {contact['name']}")
        else:
            print(f"⚠️ Contact form submitted but MongoDB not available: {contact['name']}")
        
        # Convert datetime for JSON response
        contact['timestamp'] = contact['timestamp'].isoformat()
        
        return jsonify({
            'status': 'success',
            'message': 'Thank you for your message! I will get back to you soon.',
            'contact_id': contact.get('_id', 'temp-id')
        }), 201
        
    except Exception as e:
        print(f"Error submitting contact form: {e}")
        return jsonify({'error': 'Failed to submit contact form'}), 500

@app.route('/api/contacts', methods=['GET'])
def get_contacts():
    """Get all contact form submissions (admin endpoint)"""
    try:
        # Check for simple auth header
        auth = request.headers.get('Authorization')
        if auth != 'Bearer admin-secret-key':
            return jsonify({'error': 'Unauthorized'}), 401
        
        if contacts_collection is not None:
            contacts = list(contacts_collection.find().sort('timestamp', -1))
            
            # Convert ObjectId and datetime for JSON
            for contact in contacts:
                contact['_id'] = str(contact['_id'])
                contact['timestamp'] = contact['timestamp'].isoformat()
            
            return jsonify({
                'total': len(contacts),
                'contacts': contacts
            })
        else:
            return jsonify({'total': 0, 'contacts': []})
            
    except Exception as e:
        print(f"Error getting contacts: {e}")
        return jsonify({'error': 'Failed to retrieve contacts'}), 500

