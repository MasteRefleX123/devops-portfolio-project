version: '3.8'

services:
  # Flask Portfolio Application
  portfolio:
    build:
      context: .
      dockerfile: Dockerfile
      # target: production
    container_name: oriyan-portfolio-app
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - MONGO_URI=mongodb://mongo:27017/oriyan_portfolio
      # - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=oriyan-devops-portfolio-secret-2024
    depends_on:
      - mongo
      # - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - portfolio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portfolio.rule=Host(`portfolio.local`)"
      - "traefik.http.services.portfolio.loadbalancer.server.port=5000"

  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: oriyan-portfolio-mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=oriyan
      - MONGO_INITDB_ROOT_PASSWORD=devops2024
      - MONGO_INITDB_DATABASE=oriyan_portfolio
    volumes:
      - mongo_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
      - ./backups:/backups
    networks:
      - portfolio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis for Caching & Session Management
# #   redis:
# #     image: redis:7.2-alpine
# #     container_name: oriyan-portfolio-redis
# #     ports:
# #       - "6379:6379"
# #     volumes:
# #       # - redis_data:/data
# #       - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
# #     networks:
# #       - portfolio-network
# #     restart: unless-stopped
#     command: redis-server /usr/local/etc/redis/redis.conf
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
# 
  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: oriyan-portfolio-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    depends_on:
      - portfolio
    networks:
      - portfolio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Admin Interface
  mongo-express:
    image: mongo-express:1.0.0
    container_name: oriyan-portfolio-mongo-admin
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=oriyan
      - ME_CONFIG_MONGODB_ADMINPASSWORD=devops2024
      - ME_CONFIG_MONGODB_URL=mongodb://oriyan:devops2024@mongo:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=oriyan123
      - ME_CONFIG_SITE_BASEURL=/mongo-admin/
    depends_on:
      - mongo
    networks:
      - portfolio-network
    restart: unless-stopped

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: oriyan-portfolio-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - portfolio-network
    restart: unless-stopped

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: oriyan-portfolio-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=oriyan
      - GF_SECURITY_ADMIN_PASSWORD=devops2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000/grafana/
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - portfolio-network
    restart: unless-stopped

  # Elasticsearch for Logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: oriyan-portfolio-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - portfolio-network
    restart: unless-stopped

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: oriyan-portfolio-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - portfolio-network
    restart: unless-stopped

volumes:
  mongo_data:
  #   driver: local
  # redis_data:
  #   driver: local
  prometheus_data:
  #   driver: local
  grafana_data:
  #   driver: local
  elasticsearch_data:
  #   driver: local

networks:
  portfolio-network:
    driver: bridge
    labels:
      - "project=oriyan-devops-portfolio"
      - "environment=development"
      - "owner=oriyan-rask"
