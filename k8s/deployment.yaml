apiVersion: apps/v1
kind: Deployment
metadata:
  name: oriyan-portfolio-app
  namespace: oriyan-portfolio
  labels:
    app: portfolio
    component: backend
    owner: oriyan-rask
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: portfolio
      component: backend
  template:
    metadata:
      labels:
        app: portfolio
        component: backend
        version: v1.0.0
    spec:
      containers:
      - name: portfolio-app
        image: oriyanrask/devops-portfolio:latest
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: FLASK_ENV
          value: "production"
        - name: FLASK_DEBUG
          value: "False"
        - name: MONGO_URI
          valueFrom:
            secretKeyRef:
              name: portfolio-secrets
              key: mongo-uri
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: portfolio-secrets
              key: secret-key
        - name: REDIS_URL
          value: "redis://portfolio-redis:6379/0"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
      volumes:
      - name: app-logs
        emptyDir: {}
      imagePullSecrets:
      - name: docker-registry-secret
---
apiVersion: v1
kind: Service
metadata:
  name: portfolio-service
  namespace: oriyan-portfolio
  labels:
    app: portfolio
    component: backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 5000
    protocol: TCP
    name: http
  selector:
    app: portfolio
    component: backend
